// <auto-generated />
using System;
using MeterOff.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MeterOff.EF.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20241014064123_mmmm")]
    partial class mmmm
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationUserSection", b =>
                {
                    b.Property<int>("SectionsId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SectionsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ApplicationUserSection");
                });

            modelBuilder.Entity("ApplicationUserSmallDepartment", b =>
                {
                    b.Property<string>("ApplicationUsersId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SmallDepartmentsId")
                        .HasColumnType("int");

                    b.HasKey("ApplicationUsersId", "SmallDepartmentsId");

                    b.HasIndex("SmallDepartmentsId");

                    b.ToTable("ApplicationUserSmallDepartment");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Base.AccountStatusLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("AccountStatusEnum")
                        .HasColumnType("int");

                    b.Property<int?>("AccountSuspendReasonEnum")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountStatusLog");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Dto.Reports.CMaintenenceMetersOffDto", b =>
                {
                    b.Property<int?>("AccountNo")
                        .HasColumnType("int");

                    b.Property<int?>("ActivityTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ActivityTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BranchNo")
                        .HasColumnType("int");

                    b.Property<int?>("CMMOiD")
                        .HasColumnType("int");

                    b.Property<int?>("CUploadMainteneceMetersOffReasoniD")
                        .HasColumnType("int");

                    b.Property<int?>("Code")
                        .HasColumnType("int");

                    b.Property<string>("CustomerCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DailyNo")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeliveryDateToLaboratory")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeliveryDateToTechnician")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool?>("IsMeterRecieved")
                        .HasColumnType("bit");

                    b.Property<int?>("MainDepartmentCode")
                        .HasColumnType("int");

                    b.Property<int?>("MainDepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("MainDepartmentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("MaintenanceDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("MeterInstallationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("MeterOffDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MeterOffReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("MeterPreparedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MeterTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlaceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("PlaceTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RegionNo")
                        .HasColumnType("int");

                    b.Property<int?>("SectionId")
                        .HasColumnType("int");

                    b.Property<string>("SectionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SerialNumber")
                        .HasColumnType("int");

                    b.Property<int?>("SmallDepartmentCode")
                        .HasColumnType("int");

                    b.Property<int?>("SmallDepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("SmallDepartmentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VendorCode")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView(null, (string)null);
                });

            modelBuilder.Entity("MeterOff.Core.Models.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyPosId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyPosId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.ActivityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<bool>("ISBig")
                        .HasColumnType("bit");

                    b.Property<bool>("ISsmall")
                        .HasColumnType("bit");

                    b.Property<decimal>("InitialBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("MaximumCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinimumCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StutsBigSmall")
                        .HasColumnType("int");

                    b.Property<int>("TariffTypeCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ActivityType");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.Audit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<int>("OperationType")
                        .HasColumnType("int");

                    b.Property<long>("RecordId")
                        .HasColumnType("bigint");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Auditing");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.BasicConsumer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AccountMaxLoad")
                        .IsConcurrencyToken()
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("AccountMeterReplacementTypeId")
                        .HasColumnType("int");

                    b.Property<int>("AccountMeterStatusEnum")
                        .HasColumnType("int");

                    b.Property<int>("AccountNo")
                        .HasColumnType("int");

                    b.Property<int?>("AccountUploadId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ApartmentNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BlockNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BlockReason")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("BranchNo")
                        .HasColumnType("int");

                    b.Property<int?>("BuildingTypeId")
                        .HasColumnType("int");

                    b.Property<Guid?>("CardUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("CleaningFees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ContractTotalFees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ContractingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContractingNo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerTypeId")
                        .HasColumnType("int");

                    b.Property<int>("DailyNo")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentNo")
                        .HasColumnType("int");

                    b.Property<string>("East")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndAccountDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EndAccountReason")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("FirstReadDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FirstRechargeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FloorNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GenerationCardType")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<decimal?>("InitialBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("InitialBalanceReceiptNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("InitialCardNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCardCharged")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCardRead")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEndAccountMustPayDebit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMeterInstalled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrepared")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrintedMeterExchangeOrder")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoveInatialBalance")
                        .HasColumnType("bit");

                    b.Property<bool>("Issmallcustomer")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastRechargeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Lat")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Long")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("MeasurementDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MeasurementNo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("MeterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MeterInstallationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("MeterPreparedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MeterUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("North")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("OldAccountNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("OldMeterNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OldTariffId")
                        .HasColumnType("int");

                    b.Property<int?>("PerpearedUserId")
                        .HasColumnType("int");

                    b.Property<string>("PlateNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PrintWorkOrderUserId")
                        .HasColumnType("int");

                    b.Property<int?>("PurposeOfUseId")
                        .HasColumnType("int");

                    b.Property<string>("ReceiptNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("RecivedEmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("RefferenceAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<int>("RegionNo")
                        .HasColumnType("int");

                    b.Property<int?>("SavedUserId")
                        .HasColumnType("int");

                    b.Property<int>("SectionNo")
                        .HasColumnType("int");

                    b.Property<int?>("SmallDepartmentNo")
                        .HasColumnType("int");

                    b.Property<string>("South")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TariffId")
                        .HasColumnType("int");

                    b.Property<int>("TariffTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("TransformerMeterId")
                        .HasColumnType("int");

                    b.Property<int>("TypeNo")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateTariffTypeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Western")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("BasicConsumer");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.BasicSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("AccountCode")
                        .HasColumnType("bigint");

                    b.Property<long>("CardNumber")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MFPCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BasicSetting");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.CMaintenenceMetersOff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountNo")
                        .HasColumnType("int");

                    b.Property<int>("ActivityTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("BranchNo")
                        .HasColumnType("int");

                    b.Property<int>("CUploadMainteneceMetersOffReasonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("DailyNo")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeliveryDateToLaboratory")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeliveryDateToTechnician")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExaminationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExaminationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsEnded")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsExaminationdata")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMeterInstalled")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMeterRecieved")
                        .HasColumnType("bit");

                    b.Property<int>("MainDepartmentCode")
                        .HasColumnType("int");

                    b.Property<int>("MainDepartmentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MaintenanceDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("MeterInstallationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("MeterOffDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MeterOffMaintainNote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MeterOffReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MeterOffStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MeterPreparedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MeterTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PlaceTypeId")
                        .HasColumnType("int");

                    b.Property<int>("RegionNo")
                        .HasColumnType("int");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<int?>("SerialNumber")
                        .HasColumnType("int");

                    b.Property<int>("SmallDepartmentCode")
                        .HasColumnType("int");

                    b.Property<int>("SmallDepartmentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("VendorCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("CUploadMainteneceMetersOffReasonId");

                    b.HasIndex("MainDepartmentId");

                    b.HasIndex("MeterTypeId");

                    b.HasIndex("PlaceTypeId");

                    b.HasIndex("SectionId");

                    b.HasIndex("SmallDepartmentId");

                    b.ToTable("CMaintenenceMetersOff");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.CUploadMainteneceMetersOffReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CUploadMainteneceMetersOffReason");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.CardFunction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CardFunction");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.ChargeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("AccountTamperFees")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<string>("DebitAmount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeesAmount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("NetAmount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderCreationTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderCreatorById")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderModificationTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderModifiedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderSequence")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalAmount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("ChargeLog");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.CompanyPos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMobileUnit")
                        .HasColumnType("bit");

                    b.Property<int>("LevelEnum")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<int?>("SectionId")
                        .HasColumnType("int");

                    b.Property<int?>("departmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PointOfSale");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.Consumer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AccountMaxLoad")
                        .IsConcurrencyToken()
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("AccountMeterReplacementTypeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("AccountMeterStatusEnum")
                        .HasColumnType("int");

                    b.Property<int>("AccountNo")
                        .HasColumnType("int");

                    b.Property<int?>("AccountUploadId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ApartmentNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("BlockDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BlockNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BlockReason")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BlockUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BranchNo")
                        .HasColumnType("int");

                    b.Property<string>("BuildingNationalID")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("BuildingTypeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<Guid?>("CardUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("CleaningFees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ContractTotalFees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ContractingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContractingNo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerTypeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("DailyNo")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentNo")
                        .HasColumnType("int");

                    b.Property<string>("East")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndAccountDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EndAccountReason")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("EndAccountUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FirstReadDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FirstRechargeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FloorNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GenerationCardType")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<decimal?>("InitialBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("InitialBalanceReceiptNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("InitialCardNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCardCharged")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCardRead")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEndAccountMustPayDebit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMeterInstalled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMeterReplaced")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOpenCardPending")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrepared")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrintedMeterExchangeOrder")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoveInatialBalance")
                        .HasColumnType("bit");

                    b.Property<bool>("Issmallcustomer")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastRechargeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Lat")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Long")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("MeasurementDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MeasurementNo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("MeterId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("MeterInstallationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("MeterPreparedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MeterUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("North")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("OldAccountNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("OldMeterNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OldTariffId")
                        .HasColumnType("int");

                    b.Property<int?>("PerpearedUserId")
                        .HasColumnType("int");

                    b.Property<string>("PlateNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PrintWorkOrderUserId")
                        .HasColumnType("int");

                    b.Property<int?>("PurposeOfUseId")
                        .HasColumnType("int");

                    b.Property<string>("ReceiptNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("RecivedEmployeeId")
                        .HasColumnType("int");

                    b.Property<long>("RefAdd")
                        .HasColumnType("bigint");

                    b.Property<string>("RefferenceAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<int>("RegionNo")
                        .HasColumnType("int");

                    b.Property<int?>("SavedUserId")
                        .HasColumnType("int");

                    b.Property<int>("SectionNo")
                        .HasColumnType("int");

                    b.Property<int?>("SmallDepartmentNo")
                        .HasColumnType("int");

                    b.Property<string>("South")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TariffId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("TariffTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("TransformerMeterId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("TypeNo")
                        .HasColumnType("int");

                    b.Property<string>("UnitACA_Key")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("UpdateTariffTypeDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UsageSectorCode")
                        .HasColumnType("int");

                    b.Property<string>("Western")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AccountMeterReplacementTypeId");

                    b.HasIndex("BuildingTypeId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerTypeId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("MeterId");

                    b.HasIndex("TariffId");

                    b.HasIndex("TransformerMeterId");

                    b.ToTable("Consumer");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.ConsumerConsumption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<double>("BroadCastBigCustomer")
                        .HasColumnType("float");

                    b.Property<double>("BroadCastFromKwToKW")
                        .HasColumnType("float");

                    b.Property<double>("BroadCastInSpecificKw")
                        .HasColumnType("float");

                    b.Property<double>("BroadCastMonthlyFee")
                        .HasColumnType("float");

                    b.Property<double>("CleanFee")
                        .HasColumnType("float");

                    b.Property<double>("ConsumptionStamp")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<decimal>("CurrentMonthCharges")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CustomerServiceFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FifthStepAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FifthStepValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FirstStepAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FirstStepValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FourthStepAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FourthStepValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("InstantaneousReadingId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("LocalFee")
                        .HasColumnType("float");

                    b.Property<string>("MaxDemandInKW")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MeterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Month")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<double>("QualityStamp")
                        .HasColumnType("float");

                    b.Property<decimal>("SecondStepAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SecondStepValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SeventhStepAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SeventhStepValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SixthStepAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SixthStepValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TariffId")
                        .HasColumnType("int");

                    b.Property<decimal>("ThirdStepAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ThirdStepValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<double>("TotalAmountConsumption")
                        .HasColumnType("float");

                    b.Property<string>("TotalPowerConsumption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InstantaneousReadingId");

                    b.ToTable("ConsumerConsumption");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.ConsumerConsumptionDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<double>("BroadCastBigCustomer")
                        .HasColumnType("float");

                    b.Property<double>("BroadCastFromKwToKW")
                        .HasColumnType("float");

                    b.Property<double>("BroadCastInSpecificKw")
                        .HasColumnType("float");

                    b.Property<double>("BroadCastMonthlyFee")
                        .HasColumnType("float");

                    b.Property<double>("CleanFee")
                        .HasColumnType("float");

                    b.Property<double>("ConsumptionStamp")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<decimal>("CurrentMonthCharges")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CustomerServiceFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FifthStepAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FifthStepValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FirstStepAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FirstStepValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FourthStepAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FourthStepValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("InstantaneousReadingId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("LocalFee")
                        .HasColumnType("float");

                    b.Property<string>("MaxDemandInKW")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MeterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Month")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<double>("QualityStamp")
                        .HasColumnType("float");

                    b.Property<decimal>("SecondStepAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SecondStepValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SeventhStepAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SeventhStepValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SixthStepAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SixthStepValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TariffId")
                        .HasColumnType("int");

                    b.Property<decimal>("ThirdStepAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ThirdStepValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<double>("TotalAmountConsumption")
                        .HasColumnType("float");

                    b.Property<string>("TotalPowerConsumption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InstantaneousReadingId");

                    b.ToTable("ConsumerConsumptionDetail");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.ConsumerConsumptionFee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<double>("ConsumptionFeesValue")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<int?>("FeeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<int?>("MonthlyConsumptionId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentStatusEnum")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("FeeId");

                    b.HasIndex("MonthlyConsumptionId");

                    b.ToTable("ConsumerConsumptionFee");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.ConsumerConsumptionFeesCalc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ConsumerConsumptionDetailId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeffered")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<int?>("MonthlyConsumptionId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TariffId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ConsumerConsumptionDetailId");

                    b.HasIndex("MonthlyConsumptionId");

                    b.HasIndex("TariffId");

                    b.ToTable("ConsumerConsumptionFeesCalc");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.ConsumerFee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<int?>("ReceiptNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("FeeId");

                    b.ToTable("ConsumerFee");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.ConsumerInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountUploadId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("BasicDataForFaxtionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("PassPort")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("ConsumerInfo");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.ConsumerProperity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("DebitAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("DebitTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("MeterReplacementTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<int>("NoOfInstallment")
                        .HasColumnType("int");

                    b.Property<int?>("TariffTypeId")
                        .HasColumnType("int");

                    b.Property<int>("initalBalance")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("CustomerTypeId");

                    b.HasIndex("DebitTypeId");

                    b.HasIndex("MeterReplacementTypeId");

                    b.ToTable("ConsumerProperity");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.ConsumerSettlement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerPropertySettlementId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DebitDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DebitTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ExchangeMeterOperationLogId")
                        .HasColumnType("int");

                    b.Property<decimal>("InstallmentValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystemAddedAutomically")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastPaidDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("NextInstallmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfInstallments")
                        .HasColumnType("int");

                    b.Property<int?>("PosChargeId")
                        .HasColumnType("int");

                    b.Property<decimal>("RemainingAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RemainingNumberOfInstallment")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAllPaidValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmountWithInterest")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("DebitTypeId");

                    b.ToTable("ConsumerSettlement");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.ConsumerSettlement_Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountDepartmentCode")
                        .HasColumnType("int");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("AdvancePaymentTypeEnum")
                        .HasColumnType("int");

                    b.Property<int?>("Charges_Id")
                        .HasColumnType("int");

                    b.Property<int>("ConsumerSettlement_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<decimal>("CurrentBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CurrentReservedValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("InstallmentValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("InstallmentValueAfter")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystemAddedAutomically")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastPaidDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("NextInstallmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfInstallments")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfInstallmentsAfter")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfInstallmentsPaid")
                        .HasColumnType("int");

                    b.Property<int>("PayCashORDeposit")
                        .HasColumnType("int");

                    b.Property<string>("PaymentWay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PosCode")
                        .HasColumnType("int");

                    b.Property<int?>("ReceiptNo")
                        .HasColumnType("int");

                    b.Property<decimal>("RemainingAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("VisaReceiptNo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("ConsumerSettlement_Id");

                    b.ToTable("ConsumerSettlement_Log");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.ConsumerTamper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CollectDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCollectCard")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMeterEvent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTamperToPay")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTamperToRemove")
                        .HasColumnType("bit");

                    b.Property<int?>("MeterId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<int?>("ReceiptNumber")
                        .HasColumnType("int");

                    b.Property<string>("RemoveBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("RemoveDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RemoveDateFromMeter")
                        .HasColumnType("datetime2");

                    b.Property<int>("TamperId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("MeterId");

                    b.HasIndex("TamperId");

                    b.ToTable("ConsumerTamper");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.ConsumerTariffDifference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<double>("AmountWithCurrentAccountTariff")
                        .HasColumnType("float");

                    b.Property<decimal>("Consumption")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<int>("CurrentAccountTariffId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<double>("TariffDifferenceAmount")
                        .HasColumnType("float");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("ConsumerTariffDifference");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.ConsumerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<int>("CustomerTransformTypeEnum")
                        .HasColumnType("int");

                    b.Property<int>("CustomerTypeEnum")
                        .HasColumnType("int");

                    b.Property<decimal>("InitialBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ConsumerType");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.ControlCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CardId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<Guid>("CysheildCardUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Limitation")
                        .HasColumnType("int");

                    b.Property<string>("MeterSerial")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<int>("NoOfCollectedMeters")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("ControlCard");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.ControlCardManagment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ControlCarId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ControlCarId");

                    b.HasIndex("PropertyId");

                    b.ToTable("ControlCardManagment");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.CurrentReading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int?>("BattaryStatusCode")
                        .HasColumnType("int");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CollectDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<string>("CurrentConsumption")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CurrentMonth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CurrentMonthCharges")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsCollectCard")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MaxDemandInInAmpere")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MaxDemandInInAmpereTimestamp")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MaxDemandInKW")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MaxDemandInKWTimestamp")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("MeterDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MeterId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("MeterStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MeterStatusCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<int>("NoOfCollectedMeters")
                        .HasColumnType("int");

                    b.Property<int>("OrderSequence")
                        .HasColumnType("int");

                    b.Property<decimal>("PowerFactor")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RemainingBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RemainingPower")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SystemTotalRecharges")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TariffId")
                        .HasColumnType("int");

                    b.Property<double>("TotalDebtAmount")
                        .HasColumnType("float");

                    b.Property<string>("TotalDebtInKW")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TotalPowerConsumption")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("TotalRechargeAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("MeterId");

                    b.ToTable("CurrentReading");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.CustomerPropertySettlement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<int>("CustomerPropertyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<int>("NoOfInstallment")
                        .HasColumnType("int");

                    b.Property<int>("SettlementTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerPropertyId");

                    b.HasIndex("SettlementTypeId");

                    b.ToTable("CustomerPropertySettlement");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.CutoffHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("InstantaneousReadingId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("InstantaneousReadingId");

                    b.ToTable("CutoffHistory");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.DataTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("TableFullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TableNameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TableNameEn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TableName");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.DbSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyLogo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyLogoPrint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyNameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyNameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyNameFr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<int>("DbSerial")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DbSetting");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.DebitPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<int>("DebitId")
                        .HasColumnType("int");

                    b.Property<decimal>("DiminishingInterestNet")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DiminishingInterestValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("FirstDueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstallmentsCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHasDiminishingInterest")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMeterDeduction")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("SettlementDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("DebitId");

                    b.ToTable("DebitPayment");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.DebitPaymentDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdvancePaymentDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("AdvancePaymentId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<int?>("DebitPaymentId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DueDateBeforeLinkToClearDue")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ISPayFromAdvancePayment")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLinkToClearDue")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RecieptNumber")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdvancePaymentId");

                    b.HasIndex("DebitPaymentId");

                    b.ToTable("DebitPaymentDetail");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.Deposit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int?>("AdvancePaymentTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<decimal>("RemainingAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Deposit");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.DepositDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdvancePaymentId")
                        .HasColumnType("int");

                    b.Property<int>("AdvancePaymentTypeEnum")
                        .HasColumnType("int");

                    b.Property<int?>("AdvancePaymentTypeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ChequeNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EPayPermissionId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("EPaymentPermissionNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ExchangeMeterOperationLogId")
                        .HasColumnType("int");

                    b.Property<bool>("IsClear")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUsedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MFPCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("PreviousRemainingAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ReceiptNo")
                        .HasColumnType("int");

                    b.Property<decimal>("RemainingAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TranseferedFromCustomerCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvancePaymentId");

                    b.HasIndex("AdvancePaymentTypeId");

                    b.HasIndex("EPayPermissionId");

                    b.ToTable("DepositDetail");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.DepositType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<bool>("IsClear")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("DepositType");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.EPayPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ChequeNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<string>("EPayPermissionNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("EPaymentTypeEnum")
                        .HasColumnType("int");

                    b.Property<string>("EnterpriseName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MFPCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<decimal>("RemainingAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("EPayPermission");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.EditChargeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MainOrderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<int>("SubOrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("EditChargeLog");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.EmployeeGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("EmployeeGroup");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.FeeException", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountNo")
                        .HasColumnType("int");

                    b.Property<int?>("BranchNo")
                        .HasColumnType("int");

                    b.Property<int?>("BuildingTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("DailyNo")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentNo")
                        .HasColumnType("int");

                    b.Property<double>("ExceptionAmount")
                        .HasColumnType("float");

                    b.Property<int>("FeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNoFees")
                        .HasColumnType("bit");

                    b.Property<int>("LevelEnum")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<int?>("RegionNo")
                        .HasColumnType("int");

                    b.Property<int?>("SectionNo")
                        .HasColumnType("int");

                    b.Property<int?>("TariffTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FeeId");

                    b.ToTable("FeeException");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.FeesFirstTimeOnly", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<int>("FeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("FeeId");

                    b.ToTable("FeesFirstTimeOnly");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.FeesType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int?>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<int?>("ForEveryKw")
                        .HasColumnType("int");

                    b.Property<double?>("FromKw")
                        .HasColumnType("float");

                    b.Property<double?>("InSpecificKw")
                        .HasColumnType("float");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMeterDeduction")
                        .HasColumnType("bit");

                    b.Property<double?>("LimitFor")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<int?>("Month")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<int?>("TariffTypeId")
                        .HasColumnType("int");

                    b.Property<double?>("ToKw")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("TariffTypeId");

                    b.ToTable("FeesType");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.MeterChargeHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<int>("InstantaneousReadingId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("RechargeTime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RechargeValue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("InstantaneousReadingId");

                    b.ToTable("MeterChargeHistory");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.MeterData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CardNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<Guid>("CysheildCardUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InstallationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("MaintenanceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ManufactureCompany")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("MeterOffDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MeterOffReason")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("MeterTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<int>("OrderSequence")
                        .HasColumnType("int");

                    b.Property<string>("PaymentReceiptNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VersionNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("MeterTypeId");

                    b.ToTable("MeterData");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.MeterEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("EventTime")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("InstantaneousReadingId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("RemovalTime")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RemovedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("InstantaneousReadingId");

                    b.ToTable("MeterEvent");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.MeterMaintenanceLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("InstallationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMeterInstalled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMeterReset")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMeterTransferToStock")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("MaintenanceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MeterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MeterOffDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MeterOffReason")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<int?>("OldConsumerStatus")
                        .HasColumnType("int");

                    b.Property<int?>("RecivedEmployeeTechnId")
                        .HasColumnType("int");

                    b.Property<decimal>("ResetMeterBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UploadMeterStatusEnum")
                        .HasColumnType("int");

                    b.Property<int>("UploadReasonEnum")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("MeterId");

                    b.ToTable("MeterMaintenanceLog");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.MeterReplaceLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<int>("NewMeterId")
                        .HasColumnType("int");

                    b.Property<int>("OldMeterId")
                        .HasColumnType("int");

                    b.Property<int>("OldReceiptNumber")
                        .HasColumnType("int");

                    b.Property<int>("OrderSequence")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("NewMeterId");

                    b.HasIndex("OldMeterId");

                    b.ToTable("MeterReplaceLog");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.MeterSettingForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConfigurationTemplateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MeterTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConfigurationTemplateId");

                    b.HasIndex("MeterTypeId");

                    b.ToTable("MeterSettingForm");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.MeterStatusLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MeterId")
                        .HasColumnType("int");

                    b.Property<int>("MeterStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("PassingDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MeterStatusId");

                    b.ToTable("MeterStatusLog");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.MeterStatusType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MeterStatusType");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.MeterToAnotherConsumer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ConsumerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("MeterId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<int>("NewAccountId")
                        .HasColumnType("int");

                    b.Property<int>("OldAccountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConsumerId");

                    b.HasIndex("MeterId");

                    b.ToTable("MeterToAnotherConsumer");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.MeterType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CardPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ManufacturerId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("MeterPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MeterTypeClass")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("MeterTypeMaxLoad")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MeterTypeModel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("PowerInAmpere")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PowerInVolt")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("MeterType");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.MiddleFee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ContractFeeTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<int>("ReceiptNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ContractFeeTypeId");

                    b.ToTable("MiddleFee");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.MiddleFeesType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MeterTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("MeterTypeId");

                    b.ToTable("MiddleFeesType");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.OpenConsumerCardLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("MeterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OpenConsumerCardLog");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGranted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.PlaceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("TariffTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TariffTypeId");

                    b.ToTable("PlaceType");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.PosUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<int>("PointOfSaleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserPointOfSale");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.ReplaceCardLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal?>("CardPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CardType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CardUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<string>("GenerationCardType")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReplaceWithRecharge")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("NewCardNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("OldCardNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("ReceiptNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReplacementDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SetDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("TampersToRemove")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("ReplaceCardLog");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.ReplaceConsumerLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AccountMaxLoad")
                        .IsConcurrencyToken()
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("AccountMeterReplacementTypeId")
                        .HasColumnType("int");

                    b.Property<int>("AccountMeterStatusEnum")
                        .HasColumnType("int");

                    b.Property<int>("AccountNo")
                        .HasColumnType("int");

                    b.Property<int?>("AccountUploadId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ApartmentNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BlockNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BlockReason")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("BranchNo")
                        .HasColumnType("int");

                    b.Property<int?>("BuildingTypeId")
                        .HasColumnType("int");

                    b.Property<Guid?>("CardUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("CleaningFees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ContractTotalFees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ContractingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContractingNo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerTypeId")
                        .HasColumnType("int");

                    b.Property<int>("DailyNo")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentNo")
                        .HasColumnType("int");

                    b.Property<string>("East")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("ExchangeMeterOperationLogId")
                        .HasColumnType("int");

                    b.Property<string>("FloorNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GenerationCardType")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<decimal?>("InitialBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("InitialBalanceReceiptNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("InitialCardNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCardCharged")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCardRead")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMeterInstalled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrepared")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrintedMeterExchangeOrder")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoveInatialBalance")
                        .HasColumnType("bit");

                    b.Property<bool>("Issmallcustomer")
                        .HasColumnType("bit");

                    b.Property<string>("Lat")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Long")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("MeasurementDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MeasurementNo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("MeterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MeterInstallationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MeterUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("North")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("OldAccountNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("OldMeterNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OldTariffId")
                        .HasColumnType("int");

                    b.Property<int?>("PerpearedUserId")
                        .HasColumnType("int");

                    b.Property<string>("PlateNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PrintWorkOrderUserId")
                        .HasColumnType("int");

                    b.Property<int?>("PurposeOfUseId")
                        .HasColumnType("int");

                    b.Property<string>("ReceiptNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("RecivedEmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("RefferenceAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<int>("RegionNo")
                        .HasColumnType("int");

                    b.Property<int?>("SavedUserId")
                        .HasColumnType("int");

                    b.Property<int>("SectionNo")
                        .HasColumnType("int");

                    b.Property<int?>("SmallDepartmentNo")
                        .HasColumnType("int");

                    b.Property<string>("South")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TariffId")
                        .HasColumnType("int");

                    b.Property<int>("TariffTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("TransformerMeterId")
                        .HasColumnType("int");

                    b.Property<int>("TypeNo")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateTariffTypeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Western")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ReplaceConsumerLog");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.ReplaceConsumerOperationLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("AccountOperationLogEnum")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("MeterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("OperationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReceiptNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("MeterId");

                    b.ToTable("ReplaceConsumerOperationLog");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.RetriveInitialBalanceLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<decimal?>("InitialBalanceValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("MeterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("RemoveDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RemovedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RetriveInitialBalanceLog");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.ScreenManagement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<bool>("IsAllowToAllDepartment")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("PagesName");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.ServiceLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SaveDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ServiceLogs");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.SettingForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("SettingForm");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.SettingFormsData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BillingDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("CMSIP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CancelOrPullChargePeriodInDays")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<decimal>("DebtAmountLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DirectPw")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DirectToken")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<string>("DirectUsername")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DuringRescheduling")
                        .HasColumnType("int");

                    b.Property<decimal>("FirstCutoffAlarmLimitBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FriendlyEndHour")
                        .HasColumnType("int");

                    b.Property<int>("FriendlyStartHour")
                        .HasColumnType("int");

                    b.Property<int>("GarceType")
                        .HasColumnType("int");

                    b.Property<string>("GenericSpecificationType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("GraceValue")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("HHFwName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("HHFwVersion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("InDirectToken")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<string>("IndirectPw")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IndirectUsername")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InstallingMode")
                        .HasColumnType("int");

                    b.Property<bool>("IsActivityTypeCodeAddedToConsumerRefference")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCanRemoveInitialBalance")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCmsUpdated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCommercialSectorCodeAddedToConsumerRefference")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConsumptionTamperBlock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCysheildCard")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDailyPrecedesReferenceAddress")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDebitDueDateNextDate")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeductFeesexceptionWithZeroConsumption")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelayDebitCharge")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEFUseCysheildCard")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMeterDateInFuture")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMeterDisablewhenchanging")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReadBalanceInChangeMeter")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSetDateTimeWithOpenAccount")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTariffDifferanceDeductAtNextMonth")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUpdateInitalBalanceWithOpenAccount")
                        .HasColumnType("bit");

                    b.Property<int>("MaxDaysforpaydebts")
                        .HasColumnType("int");

                    b.Property<double>("MaxLoad")
                        .HasColumnType("float");

                    b.Property<int>("MaxMonthDeferDate")
                        .HasColumnType("int");

                    b.Property<int>("MaxNumberOfCutoffs")
                        .HasColumnType("int");

                    b.Property<int>("MeterSerialFrom")
                        .HasColumnType("int");

                    b.Property<int>("MeterSerialTo")
                        .HasColumnType("int");

                    b.Property<int>("MeterTemplateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("MeterTimeStapToSet")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<int>("NoOfMaxInvalidLogin")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileUid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuiteEndHour")
                        .HasColumnType("int");

                    b.Property<int>("QuiteStartHour")
                        .HasColumnType("int");

                    b.Property<decimal>("SecondCutoffAlarmLimitBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ServicePw")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ServiceUsername")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StopChargePeriodInDays")
                        .HasColumnType("int");

                    b.Property<string>("UcsToken")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<decimal>("hoardMoneyLimit")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MeterTemplateId");

                    b.ToTable("SettingFormsData");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.Settlement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<DateTime>("DebitDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DebitTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("DiminishingInterestNet")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DiminishingInterestValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHasDiminishingInterest")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<decimal>("RemainingAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("DebitTypeId");

                    b.ToTable("Settlement");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.SettlementType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BenefitPercentage")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<int>("DebitTypeEnum")
                        .HasColumnType("int");

                    b.Property<decimal>("DiminishingInterestValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsCheckInstallmentRules")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMustMaxMonths")
                        .HasColumnType("bit");

                    b.Property<int>("MaxMonths")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ReplaceMeterCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SettlementType");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.StepsFee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<int?>("FeeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("From")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<int>("To")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FeeId");

                    b.ToTable("StepsFee");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.SubstitutionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("SubstitutionType");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.Tamper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailableInCharge")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMustPay")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStopRecharge")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Tamper");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.Tariff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ActivationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<bool>("CustomerServiceMethod")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OrganizationStructureId")
                        .HasColumnType("int");

                    b.Property<int>("TariffCode")
                        .HasColumnType("int");

                    b.Property<int>("TariffTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("ZeroReading")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("TariffTypeId");

                    b.ToTable("Tariffs");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.TariffFee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<int>("FeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<int>("TariffId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FeeId");

                    b.HasIndex("TariffId");

                    b.ToTable("TariffFee");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.TariffStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<int>("From")
                        .HasColumnType("int");

                    b.Property<decimal?>("InitialAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("InitialValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRecalculated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystemcalculation")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SangenRecalculatedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SangenRecalculatedEdge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ServicePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TariffId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("To")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TariffId");

                    b.ToTable("TariffSteps");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.TariffTamper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<int>("TamperId")
                        .HasColumnType("int");

                    b.Property<int>("TariffId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TamperId");

                    b.HasIndex("TariffId");

                    b.ToTable("TariffTamper");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.Technician", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCompanyCardPrivilidge")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDepartmentUpdate")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmployeeNew")
                        .HasColumnType("bit");

                    b.Property<int>("LevelEnum")
                        .HasColumnType("int");

                    b.Property<int?>("MainDepartmentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<int>("TechnicianTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MainDepartmentId");

                    b.HasIndex("TechnicianTypeId");

                    b.ToTable("Technician");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.Transformer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Transformer");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.TransformerReading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReadingDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("ReadingValue")
                        .HasColumnType("float");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<int>("TransformerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TransformerId");

                    b.ToTable("TransformerReading");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.UploadConsumerData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("AccountMaxLoad")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("AccountMeterReplacementTypeCode")
                        .HasColumnType("int");

                    b.Property<int?>("AccountMeterReplacementTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("AccountMeterStatusEnum")
                        .HasColumnType("int");

                    b.Property<int?>("AccountNo")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApartmentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BlockNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BranchNo")
                        .HasColumnType("int");

                    b.Property<int?>("BuildingTypeCode")
                        .HasColumnType("int");

                    b.Property<int?>("BuildingTypeId")
                        .HasColumnType("int");

                    b.Property<decimal?>("CleaningFees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ContractTotalFees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ContractingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContractingNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatorById")
                        .HasColumnType("int");

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerTypeCode")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("DailyNo")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentNo")
                        .HasColumnType("int");

                    b.Property<string>("East")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FloorNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("InitialBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("InitialBalanceReceiptNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsActivated")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCanSave")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCardCharged")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCardRead")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMeterInstalled")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPrepared")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPrintedMeterExchangeOrder")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRemoveInatialBalance")
                        .HasColumnType("bit");

                    b.Property<int?>("Issmallcustomer")
                        .HasColumnType("int");

                    b.Property<string>("Lat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Long")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("MeasurementDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MeasurementNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MeterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("North")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassPort")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlateNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PurposeOfUseCode")
                        .HasColumnType("int");

                    b.Property<int?>("PurposeOfUseId")
                        .HasColumnType("int");

                    b.Property<string>("ReceiptNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefferenceAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RefuseReasonId")
                        .HasColumnType("int");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<int?>("RegionNo")
                        .HasColumnType("int");

                    b.Property<int?>("SavedUserId")
                        .HasColumnType("int");

                    b.Property<int?>("SectionNo")
                        .HasColumnType("int");

                    b.Property<int?>("SmallDepartmentNo")
                        .HasColumnType("int");

                    b.Property<string>("South")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TariffId")
                        .HasColumnType("int");

                    b.Property<int?>("TariffTypeCode")
                        .HasColumnType("int");

                    b.Property<int?>("TariffTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("TotalUpload")
                        .HasColumnType("int");

                    b.Property<int?>("TransformerMeterCode")
                        .HasColumnType("int");

                    b.Property<int?>("TransformerMeterId")
                        .HasColumnType("int");

                    b.Property<int?>("TypeNo")
                        .HasColumnType("int");

                    b.Property<int?>("UploadFileCode")
                        .HasColumnType("int");

                    b.Property<int?>("UsageSectorCode")
                        .HasColumnType("int");

                    b.Property<int?>("UsageSectorId")
                        .HasColumnType("int");

                    b.Property<string>("Western")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UploadConsumerData");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.UploadConsumerLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastUploadCounter")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfRefusedBeforeUpload")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UploadConsumerLog");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.WorkPermissionLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MeterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("PrintingDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("MeterId");

                    b.ToTable("WorkPermissionLog");
                });

            modelBuilder.Entity("MeterOff.Core.Models.MainDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountReferenceCounter")
                        .HasColumnType("int");

                    b.Property<int>("CodeAutoGenerated")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("RegionCode")
                        .HasColumnType("int");

                    b.Property<string>("SouthCairoCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("sectionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("sectionId");

                    b.ToTable("MainDepartment");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountReferenceCounter")
                        .HasColumnType("int");

                    b.Property<int>("CodeAutoGenerated")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("RegionCode")
                        .HasColumnType("int");

                    b.Property<string>("SouthCairoCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Section");
                });

            modelBuilder.Entity("MeterOff.Core.Models.SmallDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountReferenceCounter")
                        .HasColumnType("int");

                    b.Property<int>("CodeAutoGenerated")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MainDepartmentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("RegionCode")
                        .HasColumnType("int");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<string>("SouthCairoCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MainDepartmentId");

                    b.HasIndex("SectionId");

                    b.ToTable("SmallDepartment");
                });

            modelBuilder.Entity("MeterOff.Core.Models.SmallDepartment_User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<int>("SmallDepartmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("SmallDepartmentId");

                    b.ToTable("SmallDepartment_Users");
                });

            modelBuilder.Entity("MeterOff.Core.Models.TechnicianType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorById")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TechnicianType");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Test.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Test.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Test.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Test.PaymentDetail", b =>
                {
                    b.Property<int>("PaymentDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentDetailId"));

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("CardOwnerName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ExpirationDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("SecurityCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("PaymentDetailId");

                    b.ToTable("PaymentDetails");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SectionTechnician", b =>
                {
                    b.Property<int>("SectionsId")
                        .HasColumnType("int");

                    b.Property<int>("TechniciansId")
                        .HasColumnType("int");

                    b.HasKey("SectionsId", "TechniciansId");

                    b.HasIndex("TechniciansId");

                    b.ToTable("SectionTechnician");
                });

            modelBuilder.Entity("SmallDepartmentTechnician", b =>
                {
                    b.Property<int>("SmallDepartmentsId")
                        .HasColumnType("int");

                    b.Property<int>("TechniciansId")
                        .HasColumnType("int");

                    b.HasKey("SmallDepartmentsId", "TechniciansId");

                    b.HasIndex("TechniciansId");

                    b.ToTable("SmallDepartmentTechnician");
                });

            modelBuilder.Entity("ApplicationUserSection", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Section", null)
                        .WithMany()
                        .HasForeignKey("SectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeterOff.Core.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationUserSmallDepartment", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("ApplicationUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeterOff.Core.Models.SmallDepartment", null)
                        .WithMany()
                        .HasForeignKey("SmallDepartmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MeterOff.Core.Models.Base.AccountStatusLog", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Infrastructure.Consumer", "Account")
                        .WithMany("AccountStatusLogs")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Identity.ApplicationUser", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Infrastructure.CompanyPos", null)
                        .WithMany("Users")
                        .HasForeignKey("CompanyPosId");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.CMaintenenceMetersOff", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Infrastructure.ActivityType", "activityType")
                        .WithMany()
                        .HasForeignKey("ActivityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeterOff.Core.Models.Infrastructure.CUploadMainteneceMetersOffReason", "UploadMainteneceMetersOffReason")
                        .WithMany()
                        .HasForeignKey("CUploadMainteneceMetersOffReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeterOff.Core.Models.MainDepartment", "mainDepartment")
                        .WithMany()
                        .HasForeignKey("MainDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeterOff.Core.Models.Infrastructure.MeterType", "meterType")
                        .WithMany()
                        .HasForeignKey("MeterTypeId");

                    b.HasOne("MeterOff.Core.Models.Infrastructure.PlaceType", "placeType")
                        .WithMany()
                        .HasForeignKey("PlaceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeterOff.Core.Models.Section", "section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeterOff.Core.Models.SmallDepartment", "smallDepartment")
                        .WithMany()
                        .HasForeignKey("SmallDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UploadMainteneceMetersOffReason");

                    b.Navigation("activityType");

                    b.Navigation("mainDepartment");

                    b.Navigation("meterType");

                    b.Navigation("placeType");

                    b.Navigation("section");

                    b.Navigation("smallDepartment");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.ChargeLog", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Infrastructure.Consumer", "Account")
                        .WithMany("OrderLogs")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.Consumer", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Infrastructure.SubstitutionType", "AccountMeterReplacementType")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountMeterReplacementTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeterOff.Core.Models.Infrastructure.PlaceType", "BuildingType")
                        .WithMany("Accounts")
                        .HasForeignKey("BuildingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeterOff.Core.Models.Infrastructure.ConsumerInfo", "Customer")
                        .WithMany("Accounts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeterOff.Core.Models.Infrastructure.ConsumerType", "CustomerType")
                        .WithMany()
                        .HasForeignKey("CustomerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeterOff.Core.Models.Infrastructure.Technician", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeterOff.Core.Models.Infrastructure.MeterData", "Meter")
                        .WithMany()
                        .HasForeignKey("MeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeterOff.Core.Models.Infrastructure.Tariff", "Tariff")
                        .WithMany("Accounts")
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeterOff.Core.Models.Infrastructure.Transformer", "TransformerMeter")
                        .WithMany("Accounts")
                        .HasForeignKey("TransformerMeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountMeterReplacementType");

                    b.Navigation("BuildingType");

                    b.Navigation("Customer");

                    b.Navigation("CustomerType");

                    b.Navigation("Employee");

                    b.Navigation("Meter");

                    b.Navigation("Tariff");

                    b.Navigation("TransformerMeter");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.ConsumerConsumption", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Infrastructure.CurrentReading", "InstantaneousReading")
                        .WithMany("PreviousConsumptions")
                        .HasForeignKey("InstantaneousReadingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InstantaneousReading");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.ConsumerConsumptionDetail", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Infrastructure.CurrentReading", "InstantaneousReading")
                        .WithMany("ConsumerConsumptionDetails")
                        .HasForeignKey("InstantaneousReadingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InstantaneousReading");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.ConsumerConsumptionFee", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Infrastructure.Consumer", "Account")
                        .WithMany("AccountConsumptionFees")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeterOff.Core.Models.Infrastructure.FeesType", "Fee")
                        .WithMany()
                        .HasForeignKey("FeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeterOff.Core.Models.Infrastructure.ConsumerConsumption", "MonthlyConsumption")
                        .WithMany()
                        .HasForeignKey("MonthlyConsumptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Fee");

                    b.Navigation("MonthlyConsumption");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.ConsumerConsumptionFeesCalc", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Infrastructure.Consumer", "Account")
                        .WithMany("ConsumptionCalculationFees")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeterOff.Core.Models.Infrastructure.ConsumerConsumptionDetail", null)
                        .WithMany("ConsumptionCalculationFees")
                        .HasForeignKey("ConsumerConsumptionDetailId");

                    b.HasOne("MeterOff.Core.Models.Infrastructure.ConsumerConsumption", "MonthlyConsumption")
                        .WithMany("ConsumptionCalculationFees")
                        .HasForeignKey("MonthlyConsumptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeterOff.Core.Models.Infrastructure.Tariff", "Tariff")
                        .WithMany("ConsumptionCalculationFees")
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("MonthlyConsumption");

                    b.Navigation("Tariff");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.ConsumerFee", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Infrastructure.Consumer", "Account")
                        .WithMany("AccountFees")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeterOff.Core.Models.Infrastructure.FeesType", "Fee")
                        .WithMany("AccountFees")
                        .HasForeignKey("FeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Fee");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.ConsumerProperity", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Infrastructure.ActivityType", "ActivityType")
                        .WithMany()
                        .HasForeignKey("ActivityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeterOff.Core.Models.Infrastructure.ConsumerType", "CustomerType")
                        .WithMany()
                        .HasForeignKey("CustomerTypeId");

                    b.HasOne("MeterOff.Core.Models.Infrastructure.SettlementType", "DebitType")
                        .WithMany()
                        .HasForeignKey("DebitTypeId");

                    b.HasOne("MeterOff.Core.Models.Infrastructure.SubstitutionType", "MeterReplacementType")
                        .WithMany()
                        .HasForeignKey("MeterReplacementTypeId");

                    b.Navigation("ActivityType");

                    b.Navigation("CustomerType");

                    b.Navigation("DebitType");

                    b.Navigation("MeterReplacementType");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.ConsumerSettlement", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Infrastructure.Consumer", "Account")
                        .WithMany("AccountDebits")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeterOff.Core.Models.Infrastructure.SettlementType", "DebitType")
                        .WithMany("AccountDebits")
                        .HasForeignKey("DebitTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("DebitType");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.ConsumerSettlement_Log", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Infrastructure.ConsumerSettlement", "ConsumerSettlement")
                        .WithMany("ConsumerSettlement_Logs")
                        .HasForeignKey("ConsumerSettlement_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConsumerSettlement");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.ConsumerTamper", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Infrastructure.Consumer", "Account")
                        .WithMany("AccountTampers")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeterOff.Core.Models.Infrastructure.MeterData", "Meter")
                        .WithMany()
                        .HasForeignKey("MeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeterOff.Core.Models.Infrastructure.Tamper", "Tamper")
                        .WithMany("AccountTampers")
                        .HasForeignKey("TamperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Meter");

                    b.Navigation("Tamper");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.ConsumerTariffDifference", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Infrastructure.Consumer", "Account")
                        .WithMany("AccountTariffDifferences")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.ControlCard", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Infrastructure.Technician", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.ControlCardManagment", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Infrastructure.ControlCard", "ControlCard")
                        .WithMany("ControlCardProperties")
                        .HasForeignKey("ControlCarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeterOff.Core.Models.Infrastructure.CardFunction", "CardFunction")
                        .WithMany("ControlCardProperties")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardFunction");

                    b.Navigation("ControlCard");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.CurrentReading", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Infrastructure.Consumer", "Account")
                        .WithMany("InstantaneousReadings")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeterOff.Core.Models.Infrastructure.MeterData", "Meter")
                        .WithMany()
                        .HasForeignKey("MeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Meter");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.CustomerPropertySettlement", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Infrastructure.ConsumerProperity", "CustomerProperty")
                        .WithMany("CustomerPropertySettlements")
                        .HasForeignKey("CustomerPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeterOff.Core.Models.Infrastructure.SettlementType", "SettlementType")
                        .WithMany("CustomerPropertySettlements")
                        .HasForeignKey("SettlementTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerProperty");

                    b.Navigation("SettlementType");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.CutoffHistory", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Infrastructure.CurrentReading", "InstantaneousReading")
                        .WithMany("CutOffHistories")
                        .HasForeignKey("InstantaneousReadingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InstantaneousReading");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.DebitPayment", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Infrastructure.Settlement", "Debit")
                        .WithMany("DebitPayments")
                        .HasForeignKey("DebitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Debit");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.DebitPaymentDetail", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Infrastructure.Deposit", "AdvancePayment")
                        .WithMany("DebitPaymentDetails")
                        .HasForeignKey("AdvancePaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeterOff.Core.Models.Infrastructure.DebitPayment", "DebitPayment")
                        .WithMany("DebitPaymentDetails")
                        .HasForeignKey("DebitPaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdvancePayment");

                    b.Navigation("DebitPayment");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.Deposit", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Infrastructure.Consumer", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.DepositDetail", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Infrastructure.Deposit", "AdvancePayment")
                        .WithMany("AdvancePaymentDetails")
                        .HasForeignKey("AdvancePaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeterOff.Core.Models.Infrastructure.DepositType", "AdvancePaymentType")
                        .WithMany()
                        .HasForeignKey("AdvancePaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeterOff.Core.Models.Infrastructure.EPayPermission", "EPaymentPermission")
                        .WithMany()
                        .HasForeignKey("EPayPermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdvancePayment");

                    b.Navigation("AdvancePaymentType");

                    b.Navigation("EPaymentPermission");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.FeeException", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Infrastructure.FeesType", "Fee")
                        .WithMany("FeeExceptions")
                        .HasForeignKey("FeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fee");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.FeesFirstTimeOnly", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Infrastructure.Consumer", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeterOff.Core.Models.Infrastructure.FeesType", "Fee")
                        .WithMany()
                        .HasForeignKey("FeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Fee");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.FeesType", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Infrastructure.ActivityType", "ActivityType")
                        .WithMany()
                        .HasForeignKey("TariffTypeId");

                    b.Navigation("ActivityType");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.MeterChargeHistory", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Infrastructure.CurrentReading", "InstantaneousReading")
                        .WithMany("RechargeHistories")
                        .HasForeignKey("InstantaneousReadingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InstantaneousReading");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.MeterData", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Infrastructure.MeterType", "MeterType")
                        .WithMany()
                        .HasForeignKey("MeterTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeterType");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.MeterEvent", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Infrastructure.CurrentReading", "InstantaneousReading")
                        .WithMany("PreviousMeterEvents")
                        .HasForeignKey("InstantaneousReadingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InstantaneousReading");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.MeterMaintenanceLog", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Infrastructure.Consumer", "Account")
                        .WithMany("MeterMaintenanceHistories")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeterOff.Core.Models.Infrastructure.MeterData", "Meter")
                        .WithMany()
                        .HasForeignKey("MeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Meter");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.MeterReplaceLog", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Infrastructure.Consumer", "Account")
                        .WithMany("MeterReplacementLogs")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeterOff.Core.Models.Infrastructure.MeterData", "NewMeter")
                        .WithMany()
                        .HasForeignKey("NewMeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeterOff.Core.Models.Infrastructure.MeterData", "OldMeter")
                        .WithMany()
                        .HasForeignKey("OldMeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("NewMeter");

                    b.Navigation("OldMeter");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.MeterSettingForm", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Infrastructure.SettingForm", "ConfigurationTemplate")
                        .WithMany("MeterTypeConfigurationTemplates")
                        .HasForeignKey("ConfigurationTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeterOff.Core.Models.Infrastructure.MeterType", "MeterType")
                        .WithMany("MeterTypeConfigurationTemplates")
                        .HasForeignKey("MeterTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConfigurationTemplate");

                    b.Navigation("MeterType");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.MeterStatusLog", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Infrastructure.MeterStatusType", "MeterStatus")
                        .WithMany("MeterStatusHistory")
                        .HasForeignKey("MeterStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeterStatus");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.MeterToAnotherConsumer", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Infrastructure.Consumer", null)
                        .WithMany("MeterMovementLogs")
                        .HasForeignKey("ConsumerId");

                    b.HasOne("MeterOff.Core.Models.Infrastructure.MeterData", "Meter")
                        .WithMany()
                        .HasForeignKey("MeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meter");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.MiddleFee", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Infrastructure.Consumer", "Account")
                        .WithMany("ContractFees")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeterOff.Core.Models.Infrastructure.MiddleFeesType", "ContractFeesType")
                        .WithMany("ContractFees")
                        .HasForeignKey("ContractFeeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("ContractFeesType");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.MiddleFeesType", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Infrastructure.MeterType", "MeterType")
                        .WithMany()
                        .HasForeignKey("MeterTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeterType");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.PlaceType", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Infrastructure.ActivityType", "ActivityType")
                        .WithMany()
                        .HasForeignKey("TariffTypeId");

                    b.Navigation("ActivityType");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.ReplaceCardLog", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Infrastructure.Consumer", "Account")
                        .WithMany("ReplaceCardHistories")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.ReplaceConsumerOperationLog", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Infrastructure.Consumer", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("MeterOff.Core.Models.Infrastructure.MeterData", "Meter")
                        .WithMany()
                        .HasForeignKey("MeterId");

                    b.Navigation("Account");

                    b.Navigation("Meter");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.SettingFormsData", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Infrastructure.SettingForm", "MeterTemplate")
                        .WithMany("ConfigurationTemplateDetails")
                        .HasForeignKey("MeterTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeterTemplate");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.Settlement", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Infrastructure.Consumer", "Account")
                        .WithMany("Debits")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeterOff.Core.Models.Infrastructure.SettlementType", "DebitType")
                        .WithMany("Debits")
                        .HasForeignKey("DebitTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("DebitType");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.StepsFee", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Infrastructure.FeesType", "Fee")
                        .WithMany("FeesSteps")
                        .HasForeignKey("FeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fee");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.Tariff", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Infrastructure.ActivityType", "ActivityType")
                        .WithMany("Tariffs")
                        .HasForeignKey("TariffTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityType");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.TariffFee", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Infrastructure.FeesType", "Fee")
                        .WithMany("TariffFees")
                        .HasForeignKey("FeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeterOff.Core.Models.Infrastructure.Tariff", "Tariff")
                        .WithMany("TariffFees")
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fee");

                    b.Navigation("Tariff");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.TariffStep", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Infrastructure.Tariff", "Tariff")
                        .WithMany("TariffSteps")
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tariff");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.TariffTamper", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Infrastructure.Tamper", "Tamper")
                        .WithMany("TariffTampers")
                        .HasForeignKey("TamperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeterOff.Core.Models.Infrastructure.Tariff", "Tariff")
                        .WithMany("TariffTampers")
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tamper");

                    b.Navigation("Tariff");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.Technician", b =>
                {
                    b.HasOne("MeterOff.Core.Models.MainDepartment", null)
                        .WithMany("Technicians")
                        .HasForeignKey("MainDepartmentId");

                    b.HasOne("MeterOff.Core.Models.TechnicianType", "technicianTypes")
                        .WithMany()
                        .HasForeignKey("TechnicianTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("technicianTypes");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.TransformerReading", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Infrastructure.Transformer", "TransformerMeter")
                        .WithMany("TransformerReadings")
                        .HasForeignKey("TransformerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TransformerMeter");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.WorkPermissionLog", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Infrastructure.Consumer", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeterOff.Core.Models.Infrastructure.MeterData", "Meter")
                        .WithMany()
                        .HasForeignKey("MeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Meter");
                });

            modelBuilder.Entity("MeterOff.Core.Models.MainDepartment", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Section", "section")
                        .WithMany()
                        .HasForeignKey("sectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("section");
                });

            modelBuilder.Entity("MeterOff.Core.Models.SmallDepartment", b =>
                {
                    b.HasOne("MeterOff.Core.Models.MainDepartment", "mainDepartment")
                        .WithMany()
                        .HasForeignKey("MainDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeterOff.Core.Models.Section", "section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("mainDepartment");

                    b.Navigation("section");
                });

            modelBuilder.Entity("MeterOff.Core.Models.SmallDepartment_User", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Identity.ApplicationUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeterOff.Core.Models.SmallDepartment", "SmallDepartment")
                        .WithMany()
                        .HasForeignKey("SmallDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("SmallDepartment");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Test.Book", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Test.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeterOff.Core.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SectionTechnician", b =>
                {
                    b.HasOne("MeterOff.Core.Models.Section", null)
                        .WithMany()
                        .HasForeignKey("SectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeterOff.Core.Models.Infrastructure.Technician", null)
                        .WithMany()
                        .HasForeignKey("TechniciansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmallDepartmentTechnician", b =>
                {
                    b.HasOne("MeterOff.Core.Models.SmallDepartment", null)
                        .WithMany()
                        .HasForeignKey("SmallDepartmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeterOff.Core.Models.Infrastructure.Technician", null)
                        .WithMany()
                        .HasForeignKey("TechniciansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.ActivityType", b =>
                {
                    b.Navigation("Tariffs");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.CardFunction", b =>
                {
                    b.Navigation("ControlCardProperties");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.CompanyPos", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.Consumer", b =>
                {
                    b.Navigation("AccountConsumptionFees");

                    b.Navigation("AccountDebits");

                    b.Navigation("AccountFees");

                    b.Navigation("AccountStatusLogs");

                    b.Navigation("AccountTampers");

                    b.Navigation("AccountTariffDifferences");

                    b.Navigation("ConsumptionCalculationFees");

                    b.Navigation("ContractFees");

                    b.Navigation("Debits");

                    b.Navigation("InstantaneousReadings");

                    b.Navigation("MeterMaintenanceHistories");

                    b.Navigation("MeterMovementLogs");

                    b.Navigation("MeterReplacementLogs");

                    b.Navigation("OrderLogs");

                    b.Navigation("ReplaceCardHistories");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.ConsumerConsumption", b =>
                {
                    b.Navigation("ConsumptionCalculationFees");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.ConsumerConsumptionDetail", b =>
                {
                    b.Navigation("ConsumptionCalculationFees");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.ConsumerInfo", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.ConsumerProperity", b =>
                {
                    b.Navigation("CustomerPropertySettlements");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.ConsumerSettlement", b =>
                {
                    b.Navigation("ConsumerSettlement_Logs");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.ControlCard", b =>
                {
                    b.Navigation("ControlCardProperties");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.CurrentReading", b =>
                {
                    b.Navigation("ConsumerConsumptionDetails");

                    b.Navigation("CutOffHistories");

                    b.Navigation("PreviousConsumptions");

                    b.Navigation("PreviousMeterEvents");

                    b.Navigation("RechargeHistories");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.DebitPayment", b =>
                {
                    b.Navigation("DebitPaymentDetails");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.Deposit", b =>
                {
                    b.Navigation("AdvancePaymentDetails");

                    b.Navigation("DebitPaymentDetails");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.FeesType", b =>
                {
                    b.Navigation("AccountFees");

                    b.Navigation("FeeExceptions");

                    b.Navigation("FeesSteps");

                    b.Navigation("TariffFees");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.MeterStatusType", b =>
                {
                    b.Navigation("MeterStatusHistory");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.MeterType", b =>
                {
                    b.Navigation("MeterTypeConfigurationTemplates");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.MiddleFeesType", b =>
                {
                    b.Navigation("ContractFees");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.PlaceType", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.SettingForm", b =>
                {
                    b.Navigation("ConfigurationTemplateDetails");

                    b.Navigation("MeterTypeConfigurationTemplates");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.Settlement", b =>
                {
                    b.Navigation("DebitPayments");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.SettlementType", b =>
                {
                    b.Navigation("AccountDebits");

                    b.Navigation("CustomerPropertySettlements");

                    b.Navigation("Debits");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.SubstitutionType", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.Tamper", b =>
                {
                    b.Navigation("AccountTampers");

                    b.Navigation("TariffTampers");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.Tariff", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("ConsumptionCalculationFees");

                    b.Navigation("TariffFees");

                    b.Navigation("TariffSteps");

                    b.Navigation("TariffTampers");
                });

            modelBuilder.Entity("MeterOff.Core.Models.Infrastructure.Transformer", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("TransformerReadings");
                });

            modelBuilder.Entity("MeterOff.Core.Models.MainDepartment", b =>
                {
                    b.Navigation("Technicians");
                });
#pragma warning restore 612, 618
        }
    }
}
